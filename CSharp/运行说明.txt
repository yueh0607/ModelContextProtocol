====================================================================
MCP Server HTTP 调试程序 - 运行说明
====================================================================

已完成的工作：
---------------
1. ✅ 创建了 HttpTransport.cs - 基于 HTTP 的传输层实现
2. ✅ 更新了 McpServerConsole/Program.cs - 完整的 HTTP MCP Server
3. ✅ 创建了 McpTestClient 项目 - 独立的测试客户端
4. ✅ 添加了 4 个示例工具：echo, calculator, get_system_info, delay
5. ✅ 创建了 PowerShell 测试脚本
6. ✅ 编写了完整的使用文档

文件列表：
---------
核心实现：
  - ModelContextProtocol.Core/Server/Transport/HttpTransport.cs
  - McpServerConsole/Program.cs
  - McpTestClient/Program.cs

文档：
  - McpServerConsole/README.md
  - 使用指南.md
  - 运行说明.txt（本文件）

脚本：
  - start-server.ps1
  - test-client.ps1
  - simple-test.ps1

====================================================================
如何运行 MCP Server
====================================================================

方法 1：直接运行（推荐用于调试）
--------------------------------
打开 PowerShell 或 CMD：

cd D:\Coding\CSWorkspace\ModelContextProtocol\CSharp\McpServerConsole
dotnet run

你应该看到：
========================================
     MCP Server HTTP 控制台调试程序
========================================

[启动] 使用 HTTP 传输，端口: 8767
[启动] 已注册 4 个工具

可用工具:
  - echo: 回显传入的消息
  - calculator: 执行数学计算
  - get_system_info: 获取系统信息
  - delay: 延迟指定毫秒数

[就绪] MCP 服务器已启动，等待连接...
按 Ctrl+C 停止服务器

方法 2：使用脚本
----------------
cd D:\Coding\CSWorkspace\ModelContextProtocol\CSharp
.\start-server.ps1

====================================================================
如何测试 MCP Server
====================================================================

选项 1：使用测试客户端（自动化测试）
-----------------------------------
在另一个 PowerShell 窗口中：

cd D:\Coding\CSWorkspace\ModelContextProtocol\CSharp\McpTestClient
dotnet run

这将自动运行所有测试。

选项 2：交互式测试
------------------
cd D:\Coding\CSWorkspace\ModelContextProtocol\CSharp\McpTestClient
dotnet run -- --interactive

然后输入命令：
  init      - 初始化连接
  list      - 获取工具列表
  echo      - 测试 echo 工具
  calc      - 测试计算器
  sysinfo   - 测试系统信息
  delay     - 测试延迟
  all       - 运行所有测试
  quit      - 退出

选项 3：使用 PowerShell 脚本
----------------------------
cd D:\Coding\CSWorkspace\ModelContextProtocol\CSharp
.\simple-test.ps1

选项 4：手动 HTTP 测试（使用 curl 或 PowerShell）
------------------------------------------------
# 测试服务器是否在线
Invoke-WebRequest -Uri "http://localhost:8767" -Method GET

# 发送 JSON-RPC 请求
$body = @{
    jsonrpc = "2.0"
    id = 1
    method = "tools/list"
} | ConvertTo-Json

Invoke-RestMethod -Uri "http://localhost:8767" -Method POST -Body $body -ContentType "application/json"

====================================================================
完整测试流程示例
====================================================================

步骤 1：打开第一个 PowerShell 窗口，启动服务器
----------------------------------------------
cd D:\Coding\CSWorkspace\ModelContextProtocol\CSharp\McpServerConsole
dotnet build
dotnet run

等待看到 "[就绪] MCP 服务器已启动，等待连接..."

步骤 2：打开第二个 PowerShell 窗口，运行测试
-------------------------------------------
cd D:\Coding\CSWorkspace\ModelContextProtocol\CSharp\McpTestClient
dotnet build
dotnet run

或者简单测试：
cd D:\Coding\CSWorkspace\ModelContextProtocol\CSharp
.\simple-test.ps1

步骤 3：查看结果
----------------
在测试客户端窗口中，你应该看到：
- 初始化成功
- 工具列表（4个工具）
- 各个工具的测试结果

在服务器窗口中，你应该看到：
[HTTP] Waiting for HTTP client connection...
[HTTP] Client connected
[HTTP] Received message: {...}
[工具调用] echo: Hello from test client!
[HTTP] Sending response: {...}

====================================================================
常见问题
====================================================================

Q1: 端口 8767 已被占用怎么办？
A1: 
   - 停止其他进程：Get-Process -Name "dotnet" | Stop-Process -Force
   - 或使用其他端口：dotnet run -- --port 9000

Q2: 无法连接到服务器？
A2: 
   - 确认服务器正在运行
   - 检查防火墙设置
   - 使用 netstat -ano | findstr :8767 检查端口

Q3: 编译失败？
A3: 
   - 确保安装了 .NET 8.0 SDK
   - 运行 dotnet --version 查看版本
   - 删除 bin 和 obj 文件夹后重新编译

====================================================================
下一步
====================================================================

1. 测试所有功能是否正常工作
2. 根据需要添加更多工具
3. 集成到你的应用程序中
4. 参考 使用指南.md 了解更多细节

====================================================================
技术支持
====================================================================

查看详细文档：
- McpServerConsole/README.md
- 使用指南.md

查看代码实现：
- ModelContextProtocol.Core/Server/Transport/HttpTransport.cs
- McpServerConsole/Program.cs
- McpTestClient/Program.cs

====================================================================

